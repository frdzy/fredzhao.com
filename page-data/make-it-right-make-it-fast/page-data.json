{"componentChunkName":"component---node-modules-lekoarts-gatsby-theme-minimal-blog-core-src-templates-post-query-tsx","path":"/make-it-right-make-it-fast","result":{"data":{"post":{"slug":"/make-it-right-make-it-fast","title":"Make It Right, Make It Fast","date":"2016.02.21","tags":null,"description":null,"canonicalUrl":null,"body":"var _excluded = [\"components\"];\nfunction _extends() { return _extends = Object.assign ? Object.assign.bind() : function (n) { for (var e = 1; e < arguments.length; e++) { var t = arguments[e]; for (var r in t) ({}).hasOwnProperty.call(t, r) && (n[r] = t[r]); } return n; }, _extends.apply(null, arguments); }\nfunction _objectWithoutProperties(e, t) { if (null == e) return {}; var o, r, i = _objectWithoutPropertiesLoose(e, t); if (Object.getOwnPropertySymbols) { var s = Object.getOwnPropertySymbols(e); for (r = 0; r < s.length; r++) o = s[r], t.includes(o) || {}.propertyIsEnumerable.call(e, o) && (i[o] = e[o]); } return i; }\nfunction _objectWithoutPropertiesLoose(r, e) { if (null == r) return {}; var t = {}; for (var n in r) if ({}.hasOwnProperty.call(r, n)) { if (e.includes(n)) continue; t[n] = r[n]; } return t; }\n/* @jsxRuntime classic */\n/* @jsx mdx */\n\nvar _frontmatter = {\n  \"layout\": \"post\",\n  \"title\": \"Make It Right, Make It Fast\",\n  \"date\": \"2016-02-21T00:00:00.000Z\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n    props = _objectWithoutProperties(_ref, _excluded);\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, \"It's time to make the Project pages a lot more robust.\"), mdx(\"p\", null, \"Here's the rough tradeoff I had made in not starting with a more\\nwell-engineered solution originally:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"(+) Since I haven't done much frontend development, being lazy means I don't\\nhave to learn anything new beyond what I'm already familiar with\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"(-) In each blog/page, I have to manually reference filepaths to load libraries\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"(-) In those pages, I also have to manually track those dependencies and ensure\\nthey're up to date\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"(-) Those libraries would also have to be loaded into the global namespace\")), mdx(\"div\", {\n    id: \"read-more\"\n  }), mdx(\"p\", null, \"Today I'll fix those minus signs! But first, a quick word on why this didn't\\nmake sense to do earlier.\"), mdx(\"blockquote\", null, \"Make it work -> Make it right -> Make it fast\"), mdx(\"p\", null, \"I recently heard a wise saying at work -- \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"\\\"make it work, make it right, make\\nit fast\\\"\"), \" -- as a 3-step process to take a difficult project and make it easy.\\nIt's important to follow it in that specific ordering, for two reasons.\"), mdx(\"p\", null, \"The first reason is pragmatic: the functionality of a program drives everything\\nelse. The program's correctness and speed still matter, but they're irrelevant\\nif the functionality doesn't even exist yet.\"), mdx(\"p\", null, \"The bigger reason is psychological: it's a lot more fun to realize an idea as\\nquickly as possible, even if that means it starts off looking super rough. It's\\nnot that fleshing out its details is necessarily less fun, but those things\\noften tend to get way more involved. Breaking up a huge idea into small steps of\\nideas makes the whole thing feel a lot more tenable.\"), mdx(\"p\", null, \"In this vein, the sole \\\"(+)\\\" in my tradeoff list above was crucial in its own\\nright. I didn't really know what exactly I needed until I built on the prototype\\n(answer: React on a static page); and it was very liberating to give myself\\npermission to hack up something that works without worrying about expanding the\\nscope and introducing more changes that, while they would be nice to have, were\\nsimply distractions at the time.\"), mdx(\"p\", null, \"But now the time has come to follow up on the next two steps! :)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make it work: Continue to render pages with React as I did for the first\\nproject\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make it right: I should be able to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"require()\"), \" modules\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make it fast: I should be able to run a command line script to build and\\nbundle files for web, and reuse the same common files\")), mdx(\"h2\", null, \"The solution\"), mdx(\"p\", null, \"The solution I settled on is Webpack. It handles everything I want above and\\nalso makes room for future possibilities, like \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://github.com/gaearon/react-hot-loader\"\n  }, \"React Hot Loader\"), \".\"), mdx(\"p\", null, \"Here are the steps I took:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Read a bunch of articles (see \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"#references\"\n  }, \"References\"), \" section at the end of\\nthis article)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Decide on a good-enough folder structure (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"src -> build\"), \")\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Convert the existing source files to use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"require()\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Follow the tutorial steps until I can run \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"webpack\"), \" without errors\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Finally, convert references to point to the new folder structure\")), mdx(\"p\", null, \"Step 4. took the longest time, which is to be expected since I've never worked\\nwith Webpack before. One error in particular took a bit of time to hunt down:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\"\n  }, \"ReferenceError: [BABEL] ... Unknown option: direct.presets\\n\")), mdx(\"p\", null, \"In my case, it turned out that my \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" referenced preset libraries\\nthat were too old, and \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"their\"), \" version of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"babel\"), \" didn't support the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"presets\"), \"\\nattribute. Updating \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"package.json\"), \" to use a later version fixed that up.\"), mdx(\"h2\", null, \"Looking forward\"), mdx(\"p\", null, \"Long term, I also want to be able to systematically track the progress of my\\nprojects over time. This means, for each project, I should be able to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make it work better:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add blog post with a snapshot of the code, taken when the blog post is written\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make it more right:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Maintain a Project page for the code, but as an updating repository\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Make it faster:\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"I should only need a single command to both launch the Jekyll server and\\nrerun webpack to rebuild files as they change\")))), mdx(\"h2\", null, \"References\"), mdx(\"p\", null, \"Research steps:\"), mdx(\"p\", null, \"First I tried to pick between Browserify and Webpack. My conclusion was that\\nthis decision was pretty arbitrary -- most of the arguments cover topics I\\nsimply haven't experienced firsthand -- so I picked the one that supports\\nReact Hot Loader for future Option Value.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"From Google search of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"browserify vs. webpack\"), \":\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://blog.namangoel.com/browserify-vs-webpack-js-drama\"\n  }, \"Summary of philosophies by Naman Goel\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://medium.com/@housecor/browserify-vs-webpack-b3d7ca08a0a9\"\n  }, \"Summary with more opinion for Webpack by Cory House\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"... which led to \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/petehunt/webpack-howto\"\n  }, \"webpack-howto by Pete Hunt\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://www.reddit.com/r/reactjs/comments/30at04/webpack_vs_browserify_whats_best_for_react/\"\n  }, \"Reddit discussion\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://survivejs.com/webpack_react/webpack_and_react/\"\n  }, \"Webpack and React\"), \":\\nSpecific tutorial for my exact needs\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://github.com/webpack/react-starter\"\n  }, \"react-starter\"), \": For future\\nreference, after I've explored the options in more detail\")))), mdx(\"p\", null, \"From here, I looked up a few more articles to suit my specific needs of (1)\\nsupporting a static site and (2) creating multiple chunks for multiple pages.\\nFrom these readings, I realized that the second consideration may also change\\nin the future if/when I convert this blog into a single page app, but I'm\\nsatisfied with the results for now.\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"From Google search of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"react webpack static site\"), \":\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://www.qimingweng.com/writing/webpack-static-render\"\n  }, \"Creating Static, Isomorphic Websites with React and Webpack\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"http://braddenver.com/blog/2015/react-static-site.html\"\n  }, \"React Static Site\")))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"From Google search of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"webpack multi page app\"), \":\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"https://webpack.github.io/docs/optimization.html\"\n  }, \"Webpack Optimizations\"), \":\\nofficial docs turned up from a Google search of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"webpack multi page app\"), \".\")))));\n}\n;\nMDXContent.isMDXComponent = true;","excerpt":"It's time to make the Project pages a lot more robust. Here's the rough tradeoff I had made in not starting with a more\nwell-engineered…","timeToRead":3,"banner":null}},"pageContext":{"slug":"/make-it-right-make-it-fast","formatString":"YYYY.MM.DD"}},"staticQueryHashes":["2744905544","3090400250","318001574"]}